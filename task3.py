import pandas as pd
import streamlit as st
from utils_task3 import date_based, month_based, year_based, state_based, month2_based, compare_states_date, compare_states_month, compare_states_year


# this contains the different options present on the page. The code for generating the plots are 
# present in utils_task3.py file


def task3(energy_df):
    # general things common to all the queries
    st.title("Analysis of Energy Generation")
    st.write("This page analyses the distribution of the energy generation across different states and different timelines.")
    st.markdown("**_NOTE:_** Please note that the data is only present before July 2023.")
    year_options = [2023, 2022, 2021]
    state_options = energy_df["State"].unique()
    state_options.sort()
    query_options = st.radio(label="Query Type", 
                    options=["Date Based Query", "Month Based Query", "Year Based Query", "Energy Generation for all states", "Energy Generation for a state", "Compare 2 states"],
                    )

    month_names = ["Jan(1)", "Feb(2)", "Mar(3)", "Apr(4)", "May(5)", "Jun(6)", "Jul(7)", "Aug(8)", "Sep(9)", "Oct(10)", "Nov(11)", "Dec(12)"]

    # queries mentioned on the page
    if query_options == "Date Based Query":
        st.header(query_options)
        st.write("This query takes in input a particular date and state and then represents the energy generation distribution on that date for that state.")
        state = st.selectbox(label="State", options=state_options) 
        chosen_date = st.date_input(label="Choose date")
        success, figure = date_based(chosen_date.day, chosen_date.month, chosen_date.year, state, energy_df)
        if success == 1: st.plotly_chart(figure)
        else: st.error("No Data Found for the given query.")

    elif query_options == "Month Based Query":
        st.header(query_options)
        st.write("This query takes in input a particular month, year and state and then represents the aggregated energy generation distribution for an entire month for that state.")
        state = st.selectbox(label="State", options=state_options) 
        month = st.selectbox(label="Month", options=month_names)
        month_query = month[3:].replace('(', "").replace(")","")
        year = st.selectbox(label="Year", options=year_options)
        success, figure = month_based(int(month_query), year, state, energy_df)

        if success == 1: st.plotly_chart(figure)
        else: st.error("No Data Found for the given query.")
    
    elif query_options == "Energy Generation for all states":
        st.header(query_options)
        st.write("This query takes in input a particular year and then displays a bar chart for different types of energy generated for each state. This data is really useful for comparing the scale of energy generation by each state.")
        year = st.selectbox(label="Year", options=year_options)
        st.plotly_chart(state_based(year, energy_df))
    
    elif query_options == "Energy Generation for a state":
        st.header(query_options)
        st.write("This query takes in input a particular state and year and then displays the energy generated by that state in all the months. This graph is essentially helpful in looking at the progress across months for a state.")
        state = st.selectbox(label="State", options=state_options) 
        year = st.selectbox(label="Year", options=year_options)
        st.plotly_chart(month2_based(state, year, energy_df))
    
    elif query_options == "Compare 2 states":
        st.header(query_options)
        st.write("This query takes 2 states and then compares the energy generation of both. The energy generation comparison can be done day-wise, monthly, yearly. This visualization is essentially helpful in assessing the scales of the different types of energy generated for 2 states closely.")
        query_type = st.selectbox(label="Query Type", options=['Date Based', 'Month Based', 'Year Based'])
        if query_type == 'Date Based':
            chosen_date = st.date_input(label="Choose date")
            state1 = st.selectbox(label="State1", options=state_options)
            state2 = st.selectbox(label="State2", options=state_options)
            success, figure = compare_states_date(state1, state2, energy_df, chosen_date.day, chosen_date.month, chosen_date.year)
            if success == 1: st.plotly_chart(figure)
            else: st.error("No Data Found for the given query.")
        
        elif query_type == "Month Based":
            month = st.selectbox(label="Month", options=month_names)
            month_query = month[3:].replace('(', "").replace(")","")
            year = st.selectbox(label="Year", options=year_options)
            state1 = st.selectbox(label="State1", options=state_options)
            state2 = st.selectbox(label="State2", options=state_options)

            success, figure = compare_states_month(state1, state2, energy_df, int(month_query), year)
            if success == 1: st.plotly_chart(figure)
            else: st.error("No Data Found for the given query.")
        
        else:
            year = st.selectbox(label="Year", options=year_options)
            state1 = st.selectbox(label="State1", options=state_options)
            state2 = st.selectbox(label="State2", options=state_options)

            success, figure = compare_states_year(state1, state2, energy_df, year)
            if success == 1: st.plotly_chart(figure)
            else: st.error("No Data Found for the given query.")
    # year based query
    else:
        state = st.selectbox(label="State", options=state_options) 
        year = st.selectbox(label="Year", options=year_options)
        
        success, figure = year_based(year, state, energy_df)

        if success == 1: st.plotly_chart(figure)
        else: st.error("No Data Found for the given query.")


